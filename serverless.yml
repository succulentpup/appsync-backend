service: appsync-backend
#variablesResolutionMode: 20210326

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
#  - serverless-certificate-creator
#  - serverless-domain-manager
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile, 'dolfin'} # ChangeIt
  region: ${opt:region, 'eu-west-1'} # ChangeIt
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: ${opt:lambdaHashingVersion, '20201221'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # useful for performance optimization, ref: http keep alive

custom:
  env: ${file(./env/${self:provider.stage}.yml)}
  host: ${self:custom.env.DOMAIN}.${self:custom.env.ROOT_DOMAIN}
  domain: ${self:custom.host}
  dynamodb: ${file(./env/dynamodb.env.yml):${self:provider.stage}}
  package: ${file(./package.json)}
  functionNamePrefix: ${self:service}-${self:provider.stage}
#  customCertificate:
#    certificateName: ${self:custom.domain}
#    hostedZoneName: '${self:custom.host}.'
#    region: ${self:provider.region}
#    tags:
#      Name: ${self:custom.domain}
#      Environment: ${self:provider.stage}
#  customDomain:
#    domainName: ${self:custom.domain}
#    certificateName: ${self:custom.domain}
#    stage: ${self:provider.stage}
#    basePath: api
#    createRoute53Record: true
#    endpointType: 'regional'
#    securityPolicy: tls_1_2
#    apiType: http
#    autoDomain: false


  webpack:
    packager: npm
    includeModules:
      forceExclude:
        - aws-sdk

functions: # add your functions
  health:
    handler: src/health.handler
    name: ${self:custom.functionNamePrefix}-sampleGet
    description: used as base get method template
    events:
      - http:
          method: get
          cors: true
          path: health
  saveCardDetails:
    handler: src/saveCardDetails.handler
    name: ${self:custom.functionNamePrefix}-samplePost
    description: used as base POST method template
    events:
      - http:
          method: post
          cors: true
          path: card
  fireAndFetchResponseForGivenUrl:
    handler: src/fireAndFetchResponseForGivenUrl.handler
    name: ${self:custom.functionNamePrefix}-fireAndFetchResponseForGivenUrl
    description: sample end point that fires an url, returns the response of that url
    events:
      - http:
          method: get
          cors: true
          path: fetchurl
  getAllFromDynamoTable:
    handler: src/getAllFromDynamoTable.handler
    name: ${self:custom.functionNamePrefix}-getAllFromDynamoTable
    description: sample end point that fetches an item from SampleDynamoTableChangeIt
    iamRoleStatementsName: iamrole-${self:functions.getAllFromDynamoTable.name}
    environment:
      TABLE_NAME:
        Ref: SampleDynamoTableChangeIt
    events:
      - http:
          method: get
          cors: true
          path: getAll
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: '#{SampleDynamoTableChangeIt.Arn}'
  queryItemsFromDynamoTable:
    handler: src/queryItemsFromDynamoTable.handler
    name: ${self:custom.functionNamePrefix}-queryItemsFromDynamoTable
    iamRoleStatementsName: iamrole-${self:functions.queryItemsFromDynamoTable.name}
    description: sample end point queries a few items from SampleDynamoTableChangeIt
    environment:
      TABLE_NAME:
        Ref: SampleDynamoTableChangeIt
    events:
      - http:
          method: get
          cors: true
          path: query
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: '#{SampleDynamoTableChangeIt.Arn}'
  createItemInDynamoTable:
    handler: src/createItemInDynamoTable.handler
    name: ${self:custom.functionNamePrefix}-createItemInDynamoTable
    iamRoleStatementsName: iamrole-${self:functions.createItemInDynamoTable.name}
    description: sample end point that creates an item into SampleDynamoTableChangeIt
    environment:
      TABLE_NAME:
        Ref: SampleDynamoTableChangeIt
    events:
      - http:
          method: post
          cors: true
          path: create
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: '#{SampleDynamoTableChangeIt.Arn}'
  updateItemInDynamoTable:
    handler: src/updateItemInDynamoTable.handler
    name: ${self:custom.functionNamePrefix}-updateItemInDynamoTable
    iamRoleStatementsName: iamrole-${self:functions.updateItemInDynamoTable.name}
    description: sample end point that updates an item into SampleDynamoTableChangeIt
    environment:
      TABLE_NAME:
        Ref: SampleDynamoTableChangeIt
    events:
      - http:
          method: put
          cors: true
          path: update
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: '#{SampleDynamoTableChangeIt.Arn}'
  deleteItemInDynamoTable:
    handler: src/deleteItemInDynamoTable.handler
    name: ${self:custom.functionNamePrefix}-deleteItemInDynamoTable
    iamRoleStatementsName: iamrole-${self:functions.deleteItemInDynamoTable.name}
    description: sample end point that deletes an item from SampleDynamoTableChangeIt
    environment:
      TABLE_NAME:
        Ref: SampleDynamoTableChangeIt
    events:
      - http:
          method: delete
          cors: true
          path: delete
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: '#{SampleDynamoTableChangeIt.Arn}'
resources:
  # DynamoDB Tables
  - ${file(ServiceResources/dynamoDB/sampleDynamoTableChangeIt.yml)}
  # Output
  - ${file(ServiceResources/outputs.yml)}
